a(0)  = 0  via 0                     =   0^3
a(1)  = 1  via 1                     =   1^3
a(2)  = 4  via 2 * 4                 =   2^3
a(3)  = 6  via 3 * 4^2 * 6^2         =  12^3
a(4)  = 9  via 4 * 6 * 9             =   6^3
a(5)  = 10 via 5 * 6 * 9 * 10^2      =  30^3
a(6)  = 12 via 6 * 9^2 * 12          =  18^3
a(7)  = 14 via 7 * 9^2 * 12^2 * 14^2 = 252^3
a(8)  = 8  via 8                     =   2^3
a(9)  = 16 via 9 * 12 * 16           =  12^3
a(10) = 15 via 10 * 12 * 15^2        =  30^3
h(11) = 22 via 11 * 16 * 22^2        =  44^3
h(12) = 18 via 12 * 18               =   6^3
h(13) = 26 via 13 * 16 * 26^2        =  52^3
h(14) = 21 via 14 * 18^2 * 21^2      = 126^3
h(15) = 20 via 15 * 16 * 18 * 20^2   = 120^3
h(16) = 24 via 16 * 18^2 * 24^2      = 144^3
h(17) = 34 via 17 * 32^2 * 34^2      = 272^3

18: [18, 20, 24, 25]
19: [19, 32^2, 38^2] = 304^2
20: [400, 441, 24, 625, 28]
21: [441, 25, 28, 30]
22: [484, 24, 25, 30, 33]
23: [23, 32^2, 46^2] = 368^3
24: [576, 25, 30, 32]
25: [25, 784, 32, 35]
26: [676, 784, 900, 1024, 35, 39]
27: [27]
28: [28, 30, 1024, 1225, 36]
29: (29 * 32^2 * 58^2) = 464^3
30: (30 * 36 * 40^2)   = 120^3
31: (31 * 32^2 * 62^2) = 496^3
32: [32, 1296, 1600, 45]
33: [1089, 1296, 44]
34: [1156, 1296, 40, 2025, 51]
35: [1225, 36, 40, 42]
36: [36, 48]

#########################################################

class Integer
  def cube?
    x = (self**(1.0/3)).round
    x**3 == self
  end
end

def subsets(n)
  (0...n.bit_length).select { |i| n[i] == 1 }
end

def bases(n)
  (0..Float::INFINITY).each do |i|
    seq = [n] + subsets(i).map { |k| k + n + 1 }
    yield(seq)
  end
end

def all_powers(base_seq)
  l = base_seq.length
  exponents = (0...2**l).map do |n|
    (0...l).map { |i| n[i] + 1 }
  end

  exponents.map do |exp_seq|
    base_seq.zip(exp_seq).map { |a, b| a**b }
  end
end

def cube_seq(base_seq)
  all_powers(base_seq).find { |ary| ary.reduce(1, :*).cube? }
end

bases(3).each { |seq| x = cube_seq(seq); break x if x }
