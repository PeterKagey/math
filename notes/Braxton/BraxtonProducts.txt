  a(1)  = 1             via [1]
  a(2)  = 1             via [1 * 1]
* a(3)  = 2             via [1 * 2 * 1] -- skipping (1 * 1)
  a(4)  = 4             via [1 * 1 * 2 * 1]
* a(5)  = 4             via [1 * 1 * 2 * 2 * 1] â€” includes (2 * 2); skipping (1 * 3)
  a(6)  = 6             via [1 * 1 * 2 * 1 * 3 * 1]
  a(7)  = 12            via [1 * 1 * 2 * 2 * 1 * 3 * 1]
  a(8)  = 24            via [1 * 1 * 2 * 1 * 3 * 1 * 4 * 1]
  a(9)  = 48            via [1 * 1 * 2 * 2 * 1 * 3 * 1 * 4 * 1]
* a(10) = 120           via [1 * 1 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1] -- skipping (2 * 2)
  a(11) = 240           via [1 * 1 * 2 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1]
* a(12) = 720           via [1 * 1 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1] -- skipping (2 * 2)
  a(13) = 1440          via [1 * 1 * 2 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1]
* a(14) = 4320          via [1 * 1 * 2 * 1 * 3 * 2 * 2 * 3 * 3 * 1 * 4 * 1 * 5 * 1] -- includes (3 * 3); skipping (1 * 6-8)
  a(15) = 8640          via [1 * 1 * 2 * 2 * 3 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1]
* a(16) = ?             via [...]
  a(17) = 60480         via [1 * 1 * 2 * 2 * 3 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1 * 7 * 1]
* a(18) = ?             via [...]
  a(19) = 483840        via [1 * 1 * 2 * 2 * 3 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1 * 7 * 1 * 8 * 1]
* a(20) = ?             via [...]
  a(21) = 3870720       via [1 * 1 * 2 * 2 * 3 * 2 * 4 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1 * 7 * 1 * 8 * 1]
  a(22) = 11612160      via [1 * 1 * 2 * 2 * 3 * 3 * 2 * 4 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1 * 7 * 1 * 8 * 1]
  a(23) = 34836480      via [1 * 1 * 2 * 2 * 3 * 2 * 4 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1 * 7 * 1 * 8 * 1 * 9 * 1]
  a(24) = 104509440     via [1 * 1 * 2 * 2 * 3 * 3 * 2 * 4 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1 * 7 * 1 * 8 * 1 * 9 * 1]
* a(25) = ?             via [...]
  a(26) = 1045094400    via [1 * 1 * 2 * 2 * 3 * 3 * 2 * 4 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1 * 7 * 1 * 8 * 1 * 9 * 1 * 10 * 1]

Notice that a(14) can also be constructed by skipping (2 * 2) and (3 * 3) in favor of (1 * 6) and (6 * 1)
^ a(14) = 4320          via [1 * 1 * 2 * 1 * 3 * 2 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1] -- skipping (2 * 2)

The best case for a(16) that I can do by hand is 25920:
[1 * 1 * 2 * 2 * 3 * 3 * 2 * 1 * 3 * 1 * 4 * 1 * 5 * 1 * 6 * 1]

My conjecture is to use this algorithm:
Let A061017 be the list in which n appears d(n) times, where d(n) [A000005] is the number of divisors of n:
1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, ...

Then if a(n) can be constructed "greedily" its biggest term is A061017(n - 1).
If a(n) is constructed "greedly" then take the product of the greedy algorithm.

If a(n) cannot be constructed "greedily" then take a(n-1) (which can be constructed "greedily")
Then a(n) = min(
  a(n - 1) * ceil(sqrt(A061017(n - 2))),                  <- multiply the next term of the form (k * k)
  a(n - 1) / floor(sqrt(A061017(n - 2))) * A061017(n - 2) <- divide by (k-1 * k-1) and muliply by (1 * m) and (m * 1)
)

------------------------------------

When: A061017(n - 2)/floor(sqrt(A061017(n - 2))) < A061017(n - 2)


 1 | (1 * 1)
 3 | (1 * 2) (2 * 1)
 5 | (1 * 3) (3 * 1)
 8 | (1 * 4) (2 * 2) (4 * 1)
10 | (1 * 5) (5 * 1)
14 | (1 * 6) (2 * 3) (3 * 2) (6 * 1)
16 | (1 * 7) (7 * 1)
20 | (1 * 8) (2 * 4) (4 * 2) (8 * 1)
23 | (1 * 9) (3 * 3) (9 * 1)
25 | (1 * 10) (10 * 1)
* a(14) = 4320          via [1 * 1 * 2 * 1 * 3 * 2 * 2 * 3 * 3 * 1 * 4 * 1 * 5 * 1]

----------------------------------

def children(a)
  (1..6).flat_map do |i|
    if (1..a.length).find { |k| a[k - 1] == a[-1] && a[k] == i }
      []
    else
      [a + [i]]
    end
  end
end

def f(n * ary=nil)
  return [[1]] if n == 1
  (ary || f(n-1)).
    flat_map { |ary| children(ary) }.
    select { |ary| ary.count(4) <= 1 && ary.count(5) <= 1 && ary.count(6) <= 1 }
end

a = [f(1)]
a << f(a.length + 1 * a.last)
