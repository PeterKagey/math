# Pentagonal numbers are generated by the formula, P(n) = n*(3n−1)/2. The
# first ten pentagonal numbers are:

# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their
# difference, 70 − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
# difference are pentagonal and D = |Pk − Pj| is minimised; what is the value
# of D?

start = Time.now

def is_pent?(k)
# 3 * n**2 - n - 2k = 0 where n is an integer
# 1 +- sqrt(1 - 4*3*(-2k)) / 6
# 1 + 24*k must be a perfect square and 1 + sqrt(24*k) % 6 == 0
	(Math.sqrt(1 + 24*k).to_i)**2 == 1 + 24*k &&
	(1 + Math.sqrt(1 + 24*k)) % 6 == 0
end

def pent(n); n * (3*n -1)/2 end

def pentagonal_loop
	i = 2
	loop do # this loop finds all pairs (a,b) such that a > b & a+b = i
		x = i
		((i)/2).times do
			b = [pent(x), pent(i-x+1)]
			return b[0]-b[1] if is_pent?(b[0]+b[1]) && is_pent?(b[0]-b[1])
			x -= 1
		end
		i += 1
	end
end

p pentagonal_loop
p Time.now - start

# 5482660
# 1.874815 seconds
# 10x as slow as I'd like.